From 00de2a10b45c0df769dfa50dbd43ea175624622a Mon Sep 17 00:00:00 2001
From: mikolaj_cikuj <mikolaj.cikuj@embiq.io>
Date: Fri, 28 Apr 2023 16:34:03 +0200
Subject: [PATCH] Change method of resizing components for FlexBox.

---
 Source/PluginEditor.cpp                       | 456 ++++++++++--------
 Source/PluginEditor.h                         |  11 +-
 resources/customComponents/DirectivityEQ.h    |  18 +-
 resources/customComponents/MuteSoloButton.h   |   4 +-
 .../customComponents/PolarPatternVisualizer.h |  16 +-
 resources/customComponents/TitleBar.h         | 154 +++---
 resources/lookAndFeel/AA_LaF.h                |   2 +-
 7 files changed, 336 insertions(+), 325 deletions(-)

diff --git a/Source/PluginEditor.cpp b/Source/PluginEditor.cpp
index 3b32fb7..d72536d 100644
--- a/Source/PluginEditor.cpp
+++ b/Source/PluginEditor.cpp
@@ -37,14 +37,18 @@ PolarDesignerAudioProcessorEditor::PolarDesignerAudioProcessorEditor (PolarDesig
     
     nActiveBands = processor.getNBands();
     syncChannelIdx = processor.getSyncChannelIdx();
-    
-    setSize (EDITOR_WIDTH, EDITOR_HEIGHT);
-    setLookAndFeel (&globalLaF);
-    
-    addAndMakeVisible (&title);
-    title.setTitle (String("AustrianAudio"),String("PolarDesigner"));
-    title.setFont (globalLaF.aaMedium,globalLaF.aaRegular);
-    
+
+    setResizable(true, true);
+    setSize(EDITOR_WIDTH, EDITOR_HEIGHT);
+    setLookAndFeel(&globalLaF);
+
+    addAndMakeVisible(&logoAA);
+    addAndMakeVisible (&titleAA);
+    addAndMakeVisible(&titlePD);
+    titlePD.setTitle(String("PolarDesigner"));
+    titlePD.setFont(globalLaF.aaRegular);
+    addAndMakeVisible(&titleLine);
+
     addAndMakeVisible (&footer);
     
     addAndMakeVisible (&alOverlayError);
@@ -134,6 +138,7 @@ PolarDesignerAudioProcessorEditor::PolarDesignerAudioProcessorEditor (PolarDesig
         
         // First-Order directivity visualizer (The "O"verhead view)
         addAndMakeVisible (&polarPatternVisualizers[i]);
+        polarPatternVisualizers[i].setActive(true);
         polarPatternVisualizers[i].setDirWeight (slDir[i].getValue());
         polarPatternVisualizers[i].setMuteSoloButtons (&msbSolo[i], &msbMute[i]);
         polarPatternVisualizers[i].setColour (eqColours[i]);
@@ -261,7 +266,6 @@ PolarDesignerAudioProcessorEditor::PolarDesignerAudioProcessorEditor (PolarDesig
 
     trimSlider.sliderIncremented = [this] { incrementTrim(); };
     trimSlider.sliderDecremented = [this] { decrementTrim(); };
-    
     startTimer (30);
     
     setEqMode();
@@ -307,199 +311,216 @@ void PolarDesignerAudioProcessorEditor::paint (Graphics& g)
 
 void PolarDesignerAudioProcessorEditor::resized()
 {
-    const int leftRightMargin = 30;
-    const int headerHeight = 60;
-    const int footerHeight = 25;
-    const int dirSliderHeight = 30;
-    const int linearSliderWidth = 115;
-    const int linearSliderSpacing = 32;
-    const int linearSliderHeight = 20;
-    const int buttonHeight = 18;
-    const int vSpace = 10;
-    const int vSpaceMain = 30;
-    const int hSpace = 30;
-    const int buttonVSpace = 5;
-    const int loadButtonWidth = 110;
-    const int loadButtonHeight = 28;
-    const int loadButtonMargin = 5;
-    const int cbWidth = 140;
-    const int dEqHeight = 280;
-    const int pvHeight = 120;
-    const int pvSpacing = 25;
-    const int lbWidth = 120;
-    const int sideAreaWidth = 180;
-    const int sideAreaRightMargin = 20;
-    const int sideVSpace = 20;
-    const int grpHeight = 25;
-    const int trimSliderWidth = 30;
-        
     Rectangle<int> area (getLocalBounds());
-   
-    Rectangle<int> footerArea (area.removeFromBottom(footerHeight));
-    footer.setBounds (footerArea);
-    
-    area.removeFromLeft(leftRightMargin);
-    area.removeFromRight(leftRightMargin);
-    
-   
-    Rectangle<int> headerArea = area.removeFromTop(headerHeight);
-    
-    title.setTitleCentreX (headerArea.withLeft(sideAreaWidth).getX() + 0.5 *
-                           headerArea.withLeft(sideAreaWidth).getWidth() - 8);
-    title.setBounds (headerArea);
-    
-    Rectangle<int> zDArea = headerArea.removeFromRight(90);
-    zDArea.removeFromTop(headerHeight/2 - loadButtonHeight/2);
-    tbZeroDelay.setBounds(zDArea.removeFromTop(loadButtonHeight));
-    
-    Rectangle<int> abArea = headerArea.removeFromRight(3 * loadButtonHeight);
-    abArea.removeFromTop(headerHeight/2 - loadButtonHeight/2);
-    tbAbButton[0].setBounds(abArea.getX(), abArea.getY(), loadButtonHeight, loadButtonHeight);
-    tbAbButton[1].setBounds(abArea.getX() + 1.5 * loadButtonHeight, abArea.getY(), loadButtonHeight, loadButtonHeight);
-    
-    
-    // --------- SIDE AREA ------------
-    Rectangle<int> sideArea (area.removeFromLeft(sideAreaWidth));
-    sideArea.removeFromRight(sideAreaRightMargin);
-    sideArea.removeFromTop(vSpace);
-    sideBorderPath.startNewSubPath(sideArea.getRight(), sideArea.getY());
-    sideBorderPath.lineTo(sideArea.getRight(), sideArea.getBottom());
-    sideArea.removeFromRight(leftRightMargin/2);
-    
-    // set Bands Combobox
-    grpBands.setBounds(sideArea.removeFromTop(grpHeight));
-    Rectangle<int> changeBandsArea = sideArea.removeFromTop(25);
-    cbSetNrBands.setBounds(changeBandsArea.removeFromLeft(cbWidth));
-    
-    // load file button
-    sideArea.removeFromTop(sideVSpace);
-    grpPreset.setBounds(sideArea.removeFromTop(grpHeight));
-    Rectangle<int> fileLoadArea = sideArea.removeFromTop(loadButtonHeight);
-    fileLoadArea.removeFromLeft(loadButtonMargin);
-    tbLoadFile.setBounds(fileLoadArea.removeFromLeft(loadButtonWidth));
-    
-    // save file button
-    sideArea.removeFromTop(vSpace/2);
-    Rectangle<int> fileSaveArea = sideArea.removeFromTop(loadButtonHeight);
-    fileSaveArea.removeFromLeft(loadButtonMargin);
-    tbSaveFile.setBounds(fileSaveArea.removeFromLeft(loadButtonWidth));
-    
-    // ff/df equalization
-    sideArea.removeFromTop(sideVSpace);
-    grpEq.setBounds(sideArea.removeFromTop(grpHeight));
-    Rectangle<int> eqArea = sideArea.removeFromTop(3*buttonHeight + 2*buttonVSpace);
-    tbEq[0].setBounds(eqArea.getX(), eqArea.getY(), buttonHeight + lbWidth, buttonHeight);
-    tbEq[1].setBounds(eqArea.getX(), eqArea.getY() + buttonHeight, buttonHeight + lbWidth, buttonHeight);
-    tbEq[2].setBounds(eqArea.getX(), eqArea.getY() + 2 * buttonHeight, buttonHeight + lbWidth, buttonHeight);
-    
-    // proximity compensation
-    sideArea.removeFromTop(sideVSpace);
-    grpProxComp.setBounds(sideArea.removeFromTop(grpHeight));
-    slProximity.setBounds(sideArea.removeFromTop(linearSliderHeight));
-    
-    // disturber cancellation
-    sideArea.removeFromTop(sideVSpace);
-    grpDstC.setBounds(sideArea.removeFromTop(grpHeight));
-    Rectangle<int> recordArea = sideArea.removeFromTop(buttonHeight + 2 * loadButtonHeight + vSpace);
-    tbAllowBackwardsPattern.setBounds(recordArea.removeFromTop(buttonHeight).removeFromLeft(buttonHeight + lbWidth));
-    recordArea.removeFromTop(vSpace/2);
-    recordArea.removeFromLeft(loadButtonMargin);
-    tbRecordDisturber.setBounds(recordArea.removeFromTop(loadButtonHeight).removeFromLeft(loadButtonWidth));
-    recordArea.removeFromTop(vSpace/2);
-    tbRecordSignal.setBounds(recordArea.removeFromTop(loadButtonHeight).removeFromLeft(loadButtonWidth));
-    
-    // set syncChannel
-    sideArea.removeFromTop(sideVSpace);
-    grpSync.setBounds(sideArea.removeFromTop(grpHeight));
-    Rectangle<int> syncArea = sideArea.removeFromTop(25);
-    cbSyncChannel.setBounds(syncArea.removeFromLeft(cbWidth));
-    
-    // -------------- MAIN AREA -------------
-    Rectangle<int> mainArea = area.removeFromTop(EDITOR_HEIGHT - headerHeight - footerHeight);
-    mainArea.removeFromTop(vSpaceMain);
 
-#ifdef AA_DO_DEBUG_PATH
-    { // !J! for debugging purposes only
-        debugPath.clear();
-        debugPath.addRectangle(mainArea);
+    juce::FlexBox fb;
+    fb.flexDirection = FlexBox::Direction::column;
+    fb.justifyContent = juce::FlexBox::JustifyContent::center;
+    fb.alignContent = juce::FlexBox::AlignContent::center;
+
+    juce::FlexBox topComponent;
+    topComponent.flexDirection = FlexBox::Direction::row;
+    topComponent.justifyContent = juce::FlexBox::JustifyContent::center;
+    topComponent.alignContent = juce::FlexBox::AlignContent::center;
+
+    const float marginFlex = 0.01f;
+    const float topComponentTitleFlex = 0.4f;
+    const float topComponentButtonsFlex = 0.05f;
+    const float topComponentSpacingFlex = topComponentButtonsFlex/2;
+    const float topComponentButtonsMargin = 5;
+
+    topComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    topComponent.items.add(juce::FlexItem(logoAA).withFlex(topComponentButtonsFlex));
+    topComponent.items.add(juce::FlexItem().withFlex(topComponentSpacingFlex));
+    topComponent.items.add(juce::FlexItem(titleAA).withFlex(topComponentTitleFlex));
+    topComponent.items.add(juce::FlexItem().withFlex(topComponentSpacingFlex));
+    topComponent.items.add(juce::FlexItem(titlePD).withFlex(topComponentTitleFlex));
+    topComponent.items.add(juce::FlexItem(tbAbButton[0]).withFlex(topComponentButtonsFlex).withMargin(topComponentButtonsMargin));
+    topComponent.items.add(juce::FlexItem().withFlex(topComponentSpacingFlex/2));
+    topComponent.items.add(juce::FlexItem(tbAbButton[1]).withFlex(topComponentButtonsFlex).withMargin(topComponentButtonsMargin));
+    topComponent.items.add(juce::FlexItem().withFlex(topComponentSpacingFlex));
+    topComponent.items.add(juce::FlexItem(tbZeroDelay).withFlex(topComponentButtonsFlex*3).withMargin(5));
+    topComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+
+    juce::FlexBox topComponentLine;
+    topComponentLine.flexDirection = FlexBox::Direction::row;
+    topComponentLine.justifyContent = juce::FlexBox::JustifyContent::center;
+    topComponentLine.alignContent = juce::FlexBox::AlignContent::center;
+    topComponentLine.items.add(juce::FlexItem().withFlex(marginFlex));
+    topComponentLine.items.add(juce::FlexItem(titleLine).withFlex(1.f - 2 * marginFlex));
+    topComponentLine.items.add(juce::FlexItem().withFlex(marginFlex));
+
+    const float sideComponentItemFlex = 0.05f;
+
+    juce::FlexBox sideComponent;
+    sideComponent.flexDirection = FlexBox::Direction::column;
+    sideComponent.justifyContent = juce::FlexBox::JustifyContent::center;
+    sideComponent.alignContent = juce::FlexBox::AlignContent::center;
+    sideComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    sideComponent.items.add(juce::FlexItem(grpBands).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(cbSetNrBands).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    sideComponent.items.add(juce::FlexItem(grpPreset).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(tbLoadFile).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(tbSaveFile).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    sideComponent.items.add(juce::FlexItem(grpEq).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(tbEq[0]).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(tbEq[1]).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(tbEq[2]).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    sideComponent.items.add(juce::FlexItem(grpProxComp).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(slProximity).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    sideComponent.items.add(juce::FlexItem(grpDstC).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(tbAllowBackwardsPattern).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(tbRecordDisturber).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(tbRecordSignal).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    sideComponent.items.add(juce::FlexItem(grpSync).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem(cbSyncChannel).withFlex(sideComponentItemFlex));
+    sideComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+
+    // Margins are fixed value because DirectivityEQ component has fixed margins
+    const float polarVisualizersComponentLeftMargin = 33;
+    const float polarVisualizersComponentRightMargin = 10;
+
+    juce::FlexBox polarVisualizersComponent;
+    polarVisualizersComponent.flexDirection = FlexBox::Direction::row;
+    polarVisualizersComponent.justifyContent = juce::FlexBox::JustifyContent::center;
+    polarVisualizersComponent.alignContent = juce::FlexBox::AlignContent::center;
+    polarVisualizersComponent.items.add(juce::FlexItem().withWidth(polarVisualizersComponentLeftMargin));
+
+    juce::FlexBox muteSoloModule;
+    muteSoloModule.flexDirection = FlexBox::Direction::row;
+    muteSoloModule.justifyContent = juce::FlexBox::JustifyContent::center;
+    muteSoloModule.alignContent = juce::FlexBox::AlignContent::center;
+    muteSoloModule.items.add(juce::FlexItem().withWidth(polarVisualizersComponentLeftMargin));
+
+    const float muteSoloComponentButtonsFlex = 0.14f;
+
+    juce::FlexBox muteSoloComponent[5];
+    for (int i = 0; i < 5; i++)
+    {
+        muteSoloComponent[i].flexDirection = FlexBox::Direction::row;
+        muteSoloComponent[i].justifyContent = juce::FlexBox::JustifyContent::center;
+        muteSoloComponent[i].alignContent = juce::FlexBox::AlignContent::center;
+        muteSoloComponent[i].items.add(juce::FlexItem().withFlex(marginFlex));
+        muteSoloComponent[i].items.add(juce::FlexItem(msbMute[i]).withFlex(muteSoloComponentButtonsFlex));
+        muteSoloComponent[i].items.add(juce::FlexItem().withFlex(1.f - 2 * marginFlex - 2 * muteSoloComponentButtonsFlex));
+        muteSoloComponent[i].items.add(juce::FlexItem(msbSolo[i]).withFlex(muteSoloComponentButtonsFlex));
+        muteSoloComponent[i].items.add(juce::FlexItem().withFlex(marginFlex));
+    }
+
+    juce::FlexBox dirSlidersComponent;
+    dirSlidersComponent.flexDirection = FlexBox::Direction::row;
+    dirSlidersComponent.justifyContent = juce::FlexBox::JustifyContent::center;
+    dirSlidersComponent.alignContent = juce::FlexBox::AlignContent::center;
+    dirSlidersComponent.items.add(juce::FlexItem().withWidth(polarVisualizersComponentLeftMargin));
+
+    juce::FlexBox gainBandSlidersComponent;
+    gainBandSlidersComponent.flexDirection = FlexBox::Direction::row;
+    gainBandSlidersComponent.justifyContent = juce::FlexBox::JustifyContent::center;
+    gainBandSlidersComponent.alignContent = juce::FlexBox::AlignContent::center;
+    gainBandSlidersComponent.items.add(juce::FlexItem().withWidth(polarVisualizersComponentLeftMargin));
+
+    //Dynamic layout for polarVisualizers and dirSlider components
+    //offsetDirEQ and offsetPolVis are fixed values because DirectivityEQ component has fixed margins
+    const float offsetDirEQ = 42;
+    const float offsetPolVis = 29;
+
+    const float dirEqSize = directivityEqualiser.getWidth() - offsetDirEQ;
+    auto bandLimitWidth = getBandLimitWidthVector(dirEqSize, offsetPolVis);
+
+    //pVisflex - value used for components spacing across given area i.e 0.65 (maximum 1.0 means full space)
+    float pVisflex = 0;
+
+    if (nActiveBands < 2)
+    {
+        if (polarPatternVisualizers[0].isPvisActive())
+        {
+            pVisflex = bandLimitWidth[0] / dirEqSize;
+            polarVisualizersComponent.items.add(juce::FlexItem(polarPatternVisualizers[0]).withFlex(pVisflex));
+            dirSlidersComponent.items.add(juce::FlexItem(slDir[0]).withFlex(pVisflex));
+            muteSoloModule.items.add(juce::FlexItem(muteSoloComponent[0]).withFlex(pVisflex));
+            gainBandSlidersComponent.items.add(juce::FlexItem(slBandGain[0]).withFlex(pVisflex));
+        }
     }
-#endif
-   
-    // polar Visualizers
-    Rectangle<int> pvRow = mainArea.removeFromTop(pvHeight);
-    pvRow.removeFromLeft(hSpace);
-    
-    for (auto& pVis : polarPatternVisualizers)
+    else
     {
-        pVis.setBounds(pvRow.removeFromLeft(pvHeight));
-        pvRow.removeFromLeft(pvSpacing);
+        for (int i = 0; i < nActiveBands; i++)
+        {
+            if (polarPatternVisualizers[i].isPvisActive())
+            {
+                //TODO: modify the function so that there is no danger of going outside the array --> i+1
+                pVisflex = bandLimitWidth[i+1] / dirEqSize;
+                polarVisualizersComponent.items.add(juce::FlexItem(polarPatternVisualizers[i]).withFlex(pVisflex));
+                dirSlidersComponent.items.add(juce::FlexItem(slDir[i]).withFlex(pVisflex));
+                muteSoloModule.items.add(juce::FlexItem(muteSoloComponent[i]).withFlex(pVisflex));
+                gainBandSlidersComponent.items.add(juce::FlexItem(slBandGain[i]).withFlex(pVisflex));
+            }
+        }
     }
 
-    // dEq
-    Rectangle<int> filterArea = mainArea.removeFromTop (dEqHeight + 2 * dirSliderHeight + vSpaceMain + buttonHeight);
-
-    Rectangle<int> trimSliderArea = filterArea.removeFromRight(trimSliderWidth);
-    trimSliderArea.removeFromBottom(dirSliderHeight + buttonHeight + 2);
-
-    directivityEqualiser.setBounds (filterArea.removeFromTop(dEqHeight));
-
+    polarVisualizersComponent.items.add(juce::FlexItem().withWidth(polarVisualizersComponentRightMargin));
+    dirSlidersComponent.items.add(juce::FlexItem().withWidth(polarVisualizersComponentRightMargin));
+    muteSoloModule.items.add(juce::FlexItem().withWidth(polarVisualizersComponentRightMargin));
+    gainBandSlidersComponent.items.add(juce::FlexItem().withWidth(polarVisualizersComponentRightMargin));
+
+    const float middleComponentFlex = 0.05f;
+
+    juce::FlexBox middleComponent;
+    middleComponent.flexDirection = FlexBox::Direction::column;
+    middleComponent.justifyContent = juce::FlexBox::JustifyContent::center;
+    middleComponent.alignContent = juce::FlexBox::AlignContent::center;
+    middleComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    middleComponent.items.add(juce::FlexItem(polarVisualizersComponent).withFlex(middleComponentFlex*4));
+    middleComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    middleComponent.items.add(juce::FlexItem(directivityEqualiser).withFlex(middleComponentFlex*10));
+    middleComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    middleComponent.items.add(juce::FlexItem(dirSlidersComponent).withFlex(middleComponentFlex));
+    middleComponent.items.add(juce::FlexItem(muteSoloModule).withFlex(middleComponentFlex));
+    middleComponent.items.add(juce::FlexItem(gainBandSlidersComponent).withFlex(middleComponentFlex));
+    middleComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+
+    const float trimSliderComponentFlex = 0.5f;
+    const float trimSliderComponentMarginOffset = 0.03f;
+
+    juce::FlexBox trimSliderComponent;
+    trimSliderComponent.flexDirection = FlexBox::Direction::column;
+    trimSliderComponent.justifyContent = juce::FlexBox::JustifyContent::center;
+    trimSliderComponent.alignContent = juce::FlexBox::AlignContent::center;
+    trimSliderComponent.items.add(juce::FlexItem().withFlex(trimSliderComponentFlex/2 + trimSliderComponentMarginOffset));
+    trimSliderComponent.items.add(juce::FlexItem(trimSlider).withFlex(trimSliderComponentFlex));
+    trimSliderComponent.items.add(juce::FlexItem().withFlex(trimSliderComponentFlex/2 - trimSliderComponentMarginOffset));
+    
+    juce::FlexBox mainComponent;
+    mainComponent.flexDirection = FlexBox::Direction::row;
+    mainComponent.justifyContent = juce::FlexBox::JustifyContent::center;
+    mainComponent.alignContent = juce::FlexBox::AlignContent::center;
+    mainComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    mainComponent.items.add(juce::FlexItem(sideComponent).withFlex(marginFlex*15));
+    mainComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    mainComponent.items.add(juce::FlexItem(middleComponent).withFlex(marginFlex*75));
+    mainComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+    mainComponent.items.add(juce::FlexItem(trimSliderComponent).withFlex(marginFlex*2));
+    mainComponent.items.add(juce::FlexItem().withFlex(marginFlex));
+
+    fb.items.add(juce::FlexItem().withFlex(marginFlex));
+    fb.items.add(juce::FlexItem(topComponent).withFlex(marginFlex*10));
+    fb.items.add(juce::FlexItem().withFlex(marginFlex/2));
+    fb.items.add(juce::FlexItem(topComponentLine).withFlex(marginFlex/5));
+    fb.items.add(juce::FlexItem().withFlex(marginFlex));
+    fb.items.add(juce::FlexItem(mainComponent).withFlex(marginFlex*75));
+    fb.items.add(juce::FlexItem(footer).withFlex(marginFlex*5));
+
+    fb.performLayout(area);
+
+    /*
     alOverlayError.setBounds (directivityEqualiser.getX() + 120, directivityEqualiser.getY() + 50, directivityEqualiser.getWidth() - 240, directivityEqualiser.getHeight() - 100);
     alOverlayDisturber.setBounds (directivityEqualiser.getX() + 120, directivityEqualiser.getY() + 50, directivityEqualiser.getWidth() - 240, directivityEqualiser.getHeight() - 100);
     alOverlaySignal.setBounds (directivityEqualiser.getX() + 120, directivityEqualiser.getY() + 50, directivityEqualiser.getWidth() - 240, directivityEqualiser.getHeight() - 100);
-
-    trimSliderArea.setHeight(directivityEqualiser.getHeight());
-    trimSlider.setBounds(trimSliderArea);
-
-#ifdef AA_DO_DEBUG_PATH
-    { // !J! for debugging purposes only
-        debugPath.startNewSubPath(directivityEqualiser.getX(), directivityEqualiser.getY());
-        debugPath.lineTo(directivityEqualiser.getRight(), directivityEqualiser.getBottom());
-        debugPath.addRectangle(directivityEqualiser.getX(), directivityEqualiser.getY(), directivityEqualiser.getWidth(), directivityEqualiser.getHeight());
-    }
-#endif
-    
-    filterArea.removeFromTop(vSpaceMain);
-    filterArea.removeFromLeft(hSpace);
-    
-    Rectangle<int> band0SliderArea = filterArea.removeFromLeft(linearSliderWidth);
-    slDir[0].setBounds(band0SliderArea.removeFromTop(dirSliderHeight));
-    msbSolo[0].setBounds(band0SliderArea.getX(), band0SliderArea.getY(), buttonHeight, buttonHeight);
-    msbMute[0].setBounds(band0SliderArea.getRight() - buttonHeight, band0SliderArea.getY(), buttonHeight, buttonHeight);
-    band0SliderArea.removeFromTop(2);
-    slBandGain[0].setBounds(band0SliderArea);
-
-    filterArea.removeFromLeft(linearSliderSpacing);
-    Rectangle<int> band1SliderArea = filterArea.removeFromLeft(linearSliderWidth);
-    slDir[1].setBounds(band1SliderArea.removeFromTop(dirSliderHeight));
-    msbSolo[1].setBounds(band1SliderArea.getX(), band1SliderArea.getY(), buttonHeight, buttonHeight);
-    msbMute[1].setBounds(band1SliderArea.getRight() - buttonHeight, band1SliderArea.getY(), buttonHeight, buttonHeight);
-    band1SliderArea.removeFromTop(2);
-    slBandGain[1].setBounds(band1SliderArea);
-
-    filterArea.removeFromLeft(linearSliderSpacing);
-    Rectangle<int> band2SliderArea = filterArea.removeFromLeft(linearSliderWidth);
-    slDir[2].setBounds(band2SliderArea.removeFromTop(dirSliderHeight));
-    msbSolo[2].setBounds(band2SliderArea.getX(), band2SliderArea.getY(), buttonHeight, buttonHeight);
-    msbMute[2].setBounds(band2SliderArea.getRight() - buttonHeight, band2SliderArea.getY(), buttonHeight, buttonHeight);
-    band2SliderArea.removeFromTop(2);
-    slBandGain[2].setBounds(band2SliderArea);
-    
-    filterArea.removeFromLeft(linearSliderSpacing);
-    Rectangle<int> band3SliderArea = filterArea.removeFromLeft(linearSliderWidth);
-    slDir[3].setBounds(band3SliderArea.removeFromTop(dirSliderHeight));
-    msbSolo[3].setBounds(band3SliderArea.getX(), band3SliderArea.getY(), buttonHeight, buttonHeight);
-    msbMute[3].setBounds(band3SliderArea.getRight() - buttonHeight, band3SliderArea.getY(), buttonHeight, buttonHeight);
-    band3SliderArea.removeFromTop(2);
-    slBandGain[3].setBounds(band3SliderArea);
-    
-    filterArea.removeFromLeft(linearSliderSpacing);
-    Rectangle<int> band4SliderArea = filterArea.removeFromLeft(linearSliderWidth);
-    slDir[4].setBounds(band4SliderArea.removeFromTop(dirSliderHeight));
-    msbSolo[4].setBounds(band4SliderArea.getX(), band4SliderArea.getY(), buttonHeight, buttonHeight);
-    msbMute[4].setBounds(band4SliderArea.getRight() - buttonHeight, band4SliderArea.getY(), buttonHeight, buttonHeight);
-    band4SliderArea.removeFromTop(2);
-    slBandGain[4].setBounds(band4SliderArea);
-    
+    */
 }
 
 void PolarDesignerAudioProcessorEditor::buttonClicked (Button* button)
@@ -586,6 +607,28 @@ float PolarDesignerAudioProcessorEditor::getABButtonAlphaFromLayerState(int laye
     return layerState * 0.7f + 0.3f;
 }
 
+std::vector<float> PolarDesignerAudioProcessorEditor::getBandLimitWidthVector(float dirEqSize, float offsetPolVis)
+{
+    //First calculate bandLimit vector
+    std::vector<float> bandLimit;
+    bandLimit.push_back(0);
+    for (int i = 0; i < nActiveBands - 1; i++)
+    {
+        bandLimit.push_back(directivityEqualiser.getBandlimitPathComponent(i).getX() - offsetPolVis);
+    }
+    bandLimit.push_back(dirEqSize);
+    //Next calculate width of each band
+    std::vector<float>::iterator it;
+    int i = 1;
+    std::vector<float> bandLimitWidth;
+    bandLimitWidth.push_back(dirEqSize);
+    for (it = bandLimit.begin() + 1; it != bandLimit.end(); it++, i++) {
+        bandLimitWidth.push_back(bandLimit[i] - bandLimit[i - 1]);
+    }
+
+    return bandLimitWidth;
+}
+
 bool PolarDesignerAudioProcessorEditor::getSoloActive()
 {
     bool active = false;
@@ -602,7 +645,30 @@ bool PolarDesignerAudioProcessorEditor::getSoloActive()
 
 void PolarDesignerAudioProcessorEditor::comboBoxChanged (ComboBox* cb)
 {
-    nActiveBands = cb->getSelectedId();
+    if (cb == &cbSetNrBands)
+    {
+        nActiveBands = cb->getSelectedId();
+        for (int i = 0; i < 5; i++)
+        {
+            if (i < nActiveBands)
+            {
+                polarPatternVisualizers[i].setActive(true);
+                slDir[i].setVisible(true);
+                msbMute[i].setVisible(true);
+                msbSolo[i].setVisible(true);
+                slBandGain[i].setVisible(true);
+            }
+            else
+            {
+                polarPatternVisualizers[i].setActive(false);
+                slDir[i].setVisible(false);
+                msbMute[i].setVisible(false);
+                msbSolo[i].setVisible(false);
+                slBandGain[i].setVisible(false);
+            }
+        }
+        resized();
+    }
 }
 
 void PolarDesignerAudioProcessorEditor::sliderValueChanged(Slider* slider)
@@ -773,7 +839,7 @@ void PolarDesignerAudioProcessorEditor::zeroDelayModeChange()
 void PolarDesignerAudioProcessorEditor::disableMainArea()
 {
     directivityEqualiser.setActive(false);
-    for (int i = 0; i < 5; i++)
+    for (int i = 0; i < nActiveBands; i++)
     {
         slDir[i].setEnabled(false);
         slBandGain[i].setEnabled(false);
diff --git a/Source/PluginEditor.h b/Source/PluginEditor.h
index ade01c3..620dc81 100644
--- a/Source/PluginEditor.h
+++ b/Source/PluginEditor.h
@@ -63,7 +63,8 @@ public:
     void onAlOverlayMaxSigToDist();
     void setEqMode();
     float getABButtonAlphaFromLayerState(int layerState);
-    void changeDvColour(float gain);
+    // Helper method to calculate flex on the base of bandlimitPathComponents
+    std::vector<float> getBandLimitWidthVector(float sizeDirectionalEQ, float offsetPolarVisualizer);
     
     void incrementTrim();
     void decrementTrim();
@@ -85,8 +86,12 @@ private:
     bool recordingDisturber;
     
     Colour eqColours[5];
-    
-    TitleBar<AALogo, NoIOWidget> title;
+ 
+    AALogo logoAA;
+    TitleBarAAText titleAA;
+    TitleBarPDText titlePD;
+    TitleLine titleLine;
+
     Footer footer;
     LaF globalLaF;
     
diff --git a/resources/customComponents/DirectivityEQ.h b/resources/customComponents/DirectivityEQ.h
index 4b049b3..d52997b 100644
--- a/resources/customComponents/DirectivityEQ.h
+++ b/resources/customComponents/DirectivityEQ.h
@@ -176,7 +176,6 @@ public:
 
     void paint (Graphics& g) override
     {
-        
         nrActiveBands = processor.getNBands();
         
         if (processor.zeroDelayModeActive())
@@ -445,22 +444,7 @@ public:
                            POLAR_DESIGNER_KNOBS_SIZE);
             
             // align elements
-            handle.dirSlider->setBounds(circX + (handle.dirSlider->getWidth() + POLAR_DESIGNER_KNOBS_SIZE),
-                                        handle.dirSlider->getY(),
-                                        handle.dirSlider->getWidth(), handle.dirSlider->getHeight());
-            handle.gainSlider->setBounds(circX + (handle.gainSlider->getWidth() + POLAR_DESIGNER_KNOBS_SIZE),
-                                         handle.gainSlider->getY(),
-                                         handle.gainSlider->getWidth(), handle.gainSlider->getHeight());
-            
-            handle.muteButton->setTopLeftPosition(handle.gainSlider->getX(), handle.muteButton->getY());
-            handle.soloButton->setTopLeftPosition(handle.gainSlider->getX() +
-                                                  handle.gainSlider->getWidth() -
-                                                  handle.soloButton->getWidth(),
-                                                  handle.soloButton->getY());
-
-            handle.polarPatternVisualizer->setBounds(handle.gainSlider->getScreenX(), handle.polarPatternVisualizer->getY(),
-                                                     handle.polarPatternVisualizer->getWidth(),
-                                                     handle.polarPatternVisualizer->getHeight());
+            handle.polarPatternVisualizer->getParentComponent()->resized();
 
 //#ifdef AA_DO_DEBUG_PATH
 //            { // !J! for debug purposes only
diff --git a/resources/customComponents/MuteSoloButton.h b/resources/customComponents/MuteSoloButton.h
index f85d43e..0cea5cf 100644
--- a/resources/customComponents/MuteSoloButton.h
+++ b/resources/customComponents/MuteSoloButton.h
@@ -78,7 +78,7 @@ public:
     }
     void paint (Graphics& g) override
     {
-        Rectangle<int> bounds = getLocalBounds().reduced(1,1);
+        Rectangle<int> bounds = getLocalBounds();
         const bool state = getToggleState();
 
         getLookAndFeel().drawTickBox(g, *this, bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight(), getToggleState(), isEnabled(), isMouseOver(), isMouseButtonDown());
@@ -88,7 +88,7 @@ public:
 
         g.setColour(!isEnabled() ? Colours::black : state ? Colours::black : findColour(ToggleButton::tickColourId));
         g.drawFittedText(type == solo ? "S" : "M", bounds, juce::Justification::centred, 1);
-
+        
     }
 
     void resized() override
diff --git a/resources/customComponents/PolarPatternVisualizer.h b/resources/customComponents/PolarPatternVisualizer.h
index 30f3dad..69e4c47 100644
--- a/resources/customComponents/PolarPatternVisualizer.h
+++ b/resources/customComponents/PolarPatternVisualizer.h
@@ -64,11 +64,11 @@ class PolarPatternVisualizer : public Component
 public:
     PolarPatternVisualizer()
     {
-        isActive = true;
+        isActive = false;
         soloButton = nullptr;
         muteButton = nullptr;
         soloActive = false;
-        
+
         colour = Colour(0xFFD0011B);
         
         for (int phi = -180; phi <= 180; phi += degStep)
@@ -93,7 +93,6 @@ public:
         subGrid.addPath(line, AffineTransform().rotation(0.25f * M_PI));
         subGrid.addPath(line, AffineTransform().rotation(0.5f * M_PI));
         subGrid.addPath(line, AffineTransform().rotation(0.75f * M_PI));
-
     }
 
     ~PolarPatternVisualizer()
@@ -158,10 +157,8 @@ public:
         transform = AffineTransform::fromTargetPoints((float) centre.x, (float) centre.y, (float)  centre.x, bounds.getY(), bounds.getX(), centre.y);
 
         plotArea = bounds;
-
-        
     }
-    
+
     void setDirWeight(float weight)
     {
         dirWeight = weight;
@@ -176,7 +173,12 @@ public:
             repaint();
         }
     }
-    
+
+    bool isPvisActive()
+    {
+        return isActive;
+    }
+
     void setMuteSoloButtons(MuteSoloButton* solo, MuteSoloButton* mute)
     {
         soloButton = solo;
diff --git a/resources/customComponents/TitleBar.h b/resources/customComponents/TitleBar.h
index 060d0e9..999b1ce 100644
--- a/resources/customComponents/TitleBar.h
+++ b/resources/customComponents/TitleBar.h
@@ -148,12 +148,11 @@ public:
     void setMaxSize (int maxSize) override {};
     void paint (Graphics& g) override
     {
-        aaLogoPath.applyTransform (aaLogoPath.getTransformToScaleToFit (0, 0, 39, 39, true, Justification::centred));
+        aaLogoPath.applyTransform (aaLogoPath.getTransformToScaleToFit (getLocalBounds().toFloat(), true, Justification::centred));
         // Colour AARed = Colour(155,35,35);
         g.setColour (Colours::white);
         g.strokePath (aaLogoPath, PathStrokeType (0.1f));
         g.fillPath (aaLogoPath);
-        
     };
     
 private:
@@ -344,133 +343,88 @@ private:
     Path DirectivityPath;
 };
 
-// ======================================================== TITLEBAR =========================
-template <class Tin, class Tout>
-class  TitleBar :  public Component
+class  TitleBarAAText : public Component
 {
 public:
-    TitleBar() : Component(), useTitlePath(true), centreSetExternally(false) {
-        addAndMakeVisible(&inputWidget);
-        addAndMakeVisible(&outputWidget);
-        titlePath.loadPathFromData (aaFontData, sizeof (aaFontData));
+    TitleBarAAText() {
+        titlePath.loadPathFromData(aaFontData, sizeof(aaFontData));
     };
-    ~TitleBar() {};
+    ~TitleBarAAText() {};
 
-    Tin* getInputWidgetPtr() { return &inputWidget; }
-    Tout* getOutputWidgetPtr() { return &outputWidget; }
+    void resized() override
+    {
+        repaint();
+    }
+
+    void paint(Graphics& g) override
+    {
+        Rectangle<int> bounds = getLocalBounds();
+        g.setColour(Colours::white);
+        titlePath.applyTransform(titlePath.getTransformToScaleToFit(getLocalBounds().toFloat(), true, Justification::left));
+        g.strokePath(titlePath, PathStrokeType(0.1f));
+        g.fillPath(titlePath);
+    };
 
+private:
+    Path titlePath;
+};
+
+class  TitleBarPDText : public Component
+{
+public:
+    TitleBarPDText() {};
+    ~TitleBarPDText() {};
 
-    void setTitle (String newBoldText, String newRegularText) {
-        boldText = newBoldText;
+    void setTitle(String newRegularText) {
         regularText = newRegularText;
     }
 
-    void setFont (Typeface::Ptr newBoldFont, Typeface::Ptr newRegularFont) {
-        boldFont = newBoldFont;
+    void setFont(Typeface::Ptr newRegularFont) {
         regularFont = newRegularFont;
     }
 
-    void resized () override
+    void resized() override
     {
-        const int leftWidth = inputWidget.getComponentSize();
-        const int rightWidth = outputWidget.getComponentSize();
-        Rectangle<int> bounds = getLocalBounds();
-
-        inputWidget.setBounds(bounds.getX(), bounds.getY() + 10, leftWidth, leftWidth);
-        outputWidget.setBounds(getLocalBounds().removeFromRight(rightWidth).reduced(0,15));
-        
-        centreY = bounds.getY() + bounds.getHeight() * 0.5f;
-        if (!centreSetExternally)
-        {
-            centreX = bounds.getX() + bounds.getWidth() * 0.5f;
-        }
         repaint();
     }
-    void setMaxSize (int inputSize, int outputSize)
-    {
-        inputWidget.setMaxSize(inputSize);
-        outputWidget.setMaxSize(outputSize);
-    }
 
-    void paint (Graphics& g) override
+    void paint(Graphics& g) override
     {
         Rectangle<int> bounds = getLocalBounds();
-        const float boldHeight = 30.f;
-        const float regularHeight = 30.f;
-        const int leftWidth = inputWidget.getComponentSize();
-        const int rightWidth = outputWidget.getComponentSize();
+        regularFont.setHeight(bounds.getHeight()/1.5f);
 
-        boldFont.setHeight(boldHeight);
-        regularFont.setHeight(regularHeight);
+        g.setColour(Colours::white);
+        g.setFont(regularFont);
+        g.drawFittedText(regularText, bounds.toNearestInt(), Justification::left, 1);
+    };
 
-        float boldWidth;
-        if (useTitlePath)
-        {
-            float pathWidth = titlePath.getBounds().getWidth();
-            float pathHeight = titlePath.getBounds().getHeight();
-            boldWidth = pathWidth * regularFont.getAscent() / pathHeight * 0.76;
-        }
-        else
-        {
-            boldWidth = boldFont.getStringWidth(boldText);
-        }
-            
-        const float regularWidth = regularFont.getStringWidth(regularText);
+private:
+    Font regularFont = Font(25.f);
+    juce::String regularText = "Regular";
+};
 
-        int hSpace = 6;
-        Rectangle<float> textArea (0, 0, boldWidth + regularWidth + hSpace, jmax(boldHeight, regularHeight));
-        textArea.setCentre(centreX,centreY);
+class  TitleLine : public Component
+{
+public:
+    TitleLine() {};
+    ~TitleLine() {};
 
-        if (textArea.getX() < leftWidth) textArea.setX(leftWidth);
-        if (textArea.getRight() > bounds.getRight() - rightWidth) textArea.setRight(bounds.getRight() - rightWidth);
-        
-        g.setColour(Colours::white);
-        if (useTitlePath)
-        {
-            Rectangle<float> imgBounds = textArea.removeFromLeft(boldWidth);
-            imgBounds.removeFromBottom(regularFont.getDescent() - 0.6f);
-            
-            titlePath.applyTransform (titlePath.getTransformToScaleToFit (imgBounds, true, Justification::centredBottom));
-            g.strokePath (titlePath, PathStrokeType (0.1f));
-            g.fillPath (titlePath);
-            
-            textArea.removeFromLeft(hSpace);
-            g.setFont(regularFont);
-            g.drawFittedText(regularText, textArea.toNearestInt(), Justification::bottom, 1);
-        }
-        else
-        {
-            g.setFont(boldFont);
-            g.drawFittedText(boldText, textArea.removeFromLeft(boldWidth).toNearestInt(), Justification::bottom, 1);
-            g.setFont(regularFont);
-            g.drawFittedText(regularText, textArea.toNearestInt(), Justification::bottom, 1);
-        }
+    void resized() override
+    {
+        repaint();
+    }
+
+    void paint(Graphics& g) override
+    {
+        Rectangle<int> bounds = getLocalBounds();
 
         g.setColour((Colours::white).withMultipliedAlpha(0.5));
-        g.drawLine(bounds.getX(),bounds.getY()+bounds.getHeight()-1, bounds.getX()+bounds.getWidth(), bounds.getY()+bounds.getHeight()-1);
+        g.fillAll();
     };
-    
-    void setTitleCentreX(float x)
-    {
-        centreX = x;
-        centreSetExternally = true;
-    }
 
 private:
-    Tin inputWidget;
-    Tout outputWidget;
-    Font boldFont = Font(25.f);
-    Font regularFont = Font(25.f);
-    juce::String boldText = "Bold";
-    juce::String regularText = "Regular";
-    Path titlePath;
-    bool useTitlePath;
-    float centreX;
-    float centreY;
-    bool centreSetExternally;
 };
 
-
 class IEMLogo : public Component
 {
 public:
diff --git a/resources/lookAndFeel/AA_LaF.h b/resources/lookAndFeel/AA_LaF.h
index 5457bf0..dd601ba 100644
--- a/resources/lookAndFeel/AA_LaF.h
+++ b/resources/lookAndFeel/AA_LaF.h
@@ -773,7 +773,7 @@ public:
     {
         const float boxSize = w * 0.8f;
 
-        Rectangle<float> buttonArea(x + (w - boxSize) * 0.5f, y + (h - boxSize) * 0.5f, boxSize, boxSize);
+        Rectangle<float> buttonArea(x, y, w, h);
 
         g.setColour(component.findColour(ToggleButton::tickColourId).withMultipliedAlpha(!isEnabled ? 0.1f : ticked ? 1.0f : isMouseOverButton ? 0.7f : 0.5f) );
 
-- 
2.39.1.windows.1

